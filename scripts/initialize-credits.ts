import { supabase } from '../src/config/supabase.config'
import { logger } from '../src/utils/logger'

async function initializeCreditsForExistingUsers() {
  try {
    console.log('üöÄ Iniciando inicializa√ß√£o de cr√©ditos para usu√°rios existentes...')

    // Buscar todos os usu√°rios
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id, email, subscription')

    if (usersError) {
      throw usersError
    }

    if (!users || users.length === 0) {
      console.log('Nenhum usu√°rio encontrado.')
      return
    }

    console.log(`üìä ${users.length} usu√°rios encontrados.`)

    let successCount = 0
    let errorCount = 0

    // Processar cada usu√°rio
    for (const user of users) {
      try {
        // Verificar se j√° tem cr√©ditos
        const { data: existingCredits } = await supabase
          .from('ai_credits')
          .select('id')
          .eq('user_id', user.id)
          .single()

        if (existingCredits) {
          console.log(`‚è≠Ô∏è  Usu√°rio ${user.email} j√° possui cr√©ditos.`)
          continue
        }

        // Inicializar cr√©ditos
        const { error: initError } = await supabase.rpc('initialize_user_credits', {
          p_user_id: user.id,
          p_plan_type: user.subscription || 'free'
        })

        if (initError) {
          throw initError
        }

        console.log(`‚úÖ Cr√©ditos inicializados para ${user.email} (${user.subscription})`)
        successCount++
      } catch (error: any) {
        console.error(`‚ùå Erro ao inicializar cr√©ditos para ${user.email}:`, error.message)
        errorCount++
      }
    }

    console.log('\nüìä Resumo da inicializa√ß√£o:')
    console.log(`‚úÖ Sucesso: ${successCount}`)
    console.log(`‚ùå Erros: ${errorCount}`)
    console.log(`‚è≠Ô∏è  Ignorados: ${users.length - successCount - errorCount}`)

  } catch (error: any) {
    logger.error('Erro fatal na inicializa√ß√£o de cr√©ditos:', error)
    console.error('‚ùå Erro fatal:', error.message)
    process.exit(1)
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  initializeCreditsForExistingUsers()
    .then(() => {
      console.log('‚úÖ Processo conclu√≠do!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Erro:', error)
      process.exit(1)
    })
}

export { initializeCreditsForExistingUsers }