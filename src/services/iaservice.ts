import axios, { AxiosInstance } from 'axios'
import * as cheerio from 'cheerio'
import { logger } from '../utils/logger'
import { inlineStyles } from '../utils/cssInliner'

export interface IARequest {
  userInput: string
  context?: Record<string, any>
  userId?: string
  imageUrls?: string[]
  imageIntents?: Array<{ url: string; intent: 'analyze' | 'include' }>
}

export interface IAResponse {
  html: string
  subject: string
  response: string
  metadata: {
    model: string
    processingTime: number
    generatedAt: string
    originalPrompt: string
    isGenerated: boolean
    service: string
    imagesAnalyzed?: number
  }
}

class IAService {
  private client: AxiosInstance
  private apiKey: string
  private model: string
  private baseUrl: string
  private maxConcurrent: number = 50

  constructor() {
    this.apiKey = process.env.OPENROUTER_API_KEY || ''
    this.model = process.env.OPENROUTER_MODEL || 'anthropic/claude-3.5-sonnet'
    this.baseUrl = process.env.OPENROUTER_BASE_URL || 'https://openrouter.ai/api/v1'
    
    if (!this.apiKey) {
      logger.warn('OPENROUTER_API_KEY n√£o configurada - servi√ßo IA desabilitado')
    }

    this.client = axios.create({
      baseURL: this.baseUrl,
      timeout: 90000,
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.APP_URL || 'http://localhost:3000',
        'X-Title': 'MailTrendz'
      }
    })

    this.setupInterceptors()
  }

  private setupInterceptors(): void {
    this.client.interceptors.request.use(
      (config) => {
        logger.info(`IA REQUEST: ${config.method?.toUpperCase()} ${config.url}`)
        return config
      },
      (error) => {
        logger.error('IA Request error:', error.message)
        return Promise.reject(error)
      }
    )

    this.client.interceptors.response.use(
      (response) => {
        logger.info(`IA RESPONSE: ${response.config.method?.toUpperCase()} ${response.config.url} - SUCCESS`)
        return response
      },
      (error) => {
        logger.error('IA Response error:', error.message)
        return Promise.reject(error)
      }
    )
  }

  private getSystemPrompt(
    hasExistingHTML: boolean, 
    imageUrls?: string[],
    imageIntents?: Array<{ url: string; intent: 'analyze' | 'include' }>,
    isModification?: boolean,
    projectContext?: any,
    chatHistory?: Array<{role: string, content: string, timestamp: string}>
  ): string {
    
    // üî• DETERMINAR TIPO DE OPERA√á√ÉO
    const operationType = isModification ? 'MODIFICA√á√ÉO DE EMAIL EXISTENTE' : 'CRIA√á√ÉO DE NOVO EMAIL'
    
    let basePrompt = `Voc√™ √© um especialista em cria√ß√£o de HTML para emails marketing.

üéØ TIPO DE OPERA√á√ÉO: ${operationType}

${projectContext ? `
üìä CONTEXTO DO PROJETO:
- Nome: ${projectContext.name}
- Descri√ß√£o: ${projectContext.description}
- Tipo: ${projectContext.type}
- Status: ${projectContext.status}
- Assunto atual: ${projectContext.subject || 'N√£o definido'}
- Criado em: ${projectContext.createdAt}
- √öltima atualiza√ß√£o: ${projectContext.updatedAt}
- Prompt original: ${projectContext.metadata?.originalPrompt || 'N√£o especificado'}
- Vers√£o: ${projectContext.metadata?.version || 1}
- Gerado por IA: ${projectContext.metadata?.aiGenerated ? 'Sim' : 'N√£o'}
` : ''}

${chatHistory && chatHistory.length > 0 ? `
üí¨ HIST√ìRICO DA CONVERSA (√∫ltimas mensagens):
${chatHistory.map((msg, index) => `${index + 1}. ${msg.role.toUpperCase()}: ${msg.content}`).join('\n')}

üìù AN√ÅLISE DO HIST√ìRICO:
- Total de mensagens: ${chatHistory.length}
- √öltima atividade: ${chatHistory[chatHistory.length - 1]?.timestamp}
- Padr√£o: ${chatHistory.filter(m => m.role === 'user').length} solicita√ß√µes do usu√°rio
` : ''}

${isModification ? `
üö® INSTRU√á√ïES CR√çTICAS PARA MODIFICA√á√ÉO:
1. Voc√™ est√° MODIFICANDO um email que j√° existe
2. ANALISE cuidadosamente o HTML fornecido
3. IDENTIFIQUE exatamente o que o usu√°rio quer alterar
4. MANTENHA absolutamente tudo que n√£o foi explicitamente solicitado para mudar
5. Se o usu√°rio pedir algo que j√° existe no email, confirme ou fa√ßa ajustes m√≠nimos
6. PRESERVE toda a estrutura, cores, textos e elementos n√£o mencionados
7. Sua resposta deve conter APENAS O HTML, sem nenhum texto adicional
8. Se a modifica√ß√£o solicitada j√° estiver presente, explique isso educadamente

üîç PROCESSO DE MODIFICA√á√ÉO:
- Leia o HTML atual completamente
- Identifique os elementos espec√≠ficos mencionados pelo usu√°rio
- Modifique APENAS esses elementos
- Mantenha o resto 100% id√™ntico
` : `
üÜï INSTRU√á√ïES PARA CRIA√á√ÉO:
1. Voc√™ est√° CRIANDO um novo email do zero
2. Use as informa√ß√µes do contexto do projeto como base
3. Siga as melhores pr√°ticas de email marketing
4. Crie um design profissional e atrativo
5. Sua resposta deve conter APENAS O HTML, sem nenhum texto adicional
`}

üé® INSTRU√á√ïES T√âCNICAS:
1. A RESPOSTA DEVE SER UMA √öNICA LINHA DE HTML SEM QUEBRAS DE LINHA
2. Coloque todo o CSS dentro de uma √∫nica tag <style> no <head>
3. IMPORTANTE: Defina o font-size base como 18px no body
4. Para cabe√ßalhos: h1 = 30px, h2 = 24px, h3 = 22px
5. Para bot√µes: font-size de 20px ou maior
6. Use divs para layout, evite tabelas complexas
7. Cores devem ser harmoniosas e profissionais
8. NUNCA use emojis no HTML (üö´ ‚ùå ‚úÖ üî• etc.)
9. Ano atual: 2025
10. Retorne apenas o HTML, sem explica√ß√µes adicionais
11. NUNCA inclua frases como "HTML gerado com sucesso" ou similares
12. NUNCA use URLs de exemplo como "exemplo.com" ou "example.com"
13. Se n√£o houver imagens fornecidas, N√ÉO inclua tags <img> no HTML

${hasExistingHTML ? `
üìÑ IMPORTANTE: Um HTML existente ser√° fornecido para modifica√ß√£o
` : ''}

${imageUrls && imageUrls.length > 0 ? `
üñºÔ∏è IMAGENS FORNECIDAS: ${imageUrls.length} imagem(ns)
- Processar conforme instru√ß√µes espec√≠ficas de cada imagem
- Incluir ou analisar conforme indicado
` : ''}

${imageIntents && imageIntents.length > 0 ? `
üîç INSTRU√á√ïES ESPEC√çFICAS PARA IMAGENS:
${imageIntents.filter(i => i.intent === 'analyze').length > 0 ? `
- IMAGENS PARA ANALISAR (usar como refer√™ncia, N√ÉO incluir no HTML):
${imageIntents.filter(i => i.intent === 'analyze').map((img, i) => `  ${i + 1}. ${img.url}`).join('\n')}` : ''}
${imageIntents.filter(i => i.intent === 'include').length > 0 ? `
- IMAGENS PARA INCLUIR NO HTML (usar estas URLs exatas):
${imageIntents.filter(i => i.intent === 'include').map((img, i) => `  ${i + 1}. ${img.url}`).join('\n')}` : ''}
` : ''}

‚ö†Ô∏è LEMBRE-SE: Retorne APENAS o HTML puro, sem nenhum texto adicional antes ou depois!`

    return basePrompt
  }

  private buildMessageContent(
    userInput: string, 
    existingHTML?: string, 
    imageUrls?: string[],
    imageIntents?: Array<{ url: string; intent: 'analyze' | 'include' }>,
    chatHistory?: Array<{role: string, content: string, timestamp: string}>,
    projectContext?: any
  ): any {
    let enhancedInput = userInput
    
    // üî• ADICIONAR CONTEXTO DO PROJETO
    if (projectContext) {
      enhancedInput += `

üìä CONTEXTO DO PROJETO:
Nome: ${projectContext.name}
Descri√ß√£o: ${projectContext.description}
Tipo: ${projectContext.type}
Status: ${projectContext.status}`
    }
    
    // üî• ADICIONAR RESUMO DO HIST√ìRICO
    if (chatHistory && chatHistory.length > 0) {
      const userMessages = chatHistory.filter(m => m.role === 'user')
      const aiMessages = chatHistory.filter(m => m.role === 'ai')
      
      enhancedInput += `

üí¨ CONTEXTO DA CONVERSA:
- Mensagens anteriores: ${chatHistory.length}
- Solicita√ß√µes do usu√°rio: ${userMessages.length}
- Respostas da IA: ${aiMessages.length}

üìù √öLTIMAS INTERA√á√ïES:
${chatHistory.slice(-3).map(msg => `${msg.role.toUpperCase()}: ${msg.content}`).join('\n')}

üéØ INSTRU√á√ÉO: Considere todo este contexto ao processar a nova solicita√ß√£o.`
    }
    
    // üî• ADICIONAR HTML EXISTENTE COM DESTAQUE
    if (existingHTML) {
      enhancedInput += `

üö® HTML ATUAL DO PROJETO (PARA MODIFICA√á√ÉO):
${existingHTML}

‚ö†Ô∏è INSTRU√á√ÉO CR√çTICA: 
- Este √© o HTML que est√° atualmente no projeto
- Modifique APENAS os elementos mencionados na solicita√ß√£o
- Mantenha TODO o resto exatamente igual
- N√ÉO recrie o email do zero`
    }
    
    // üî• PROCESSAR IMAGENS
    if (imageIntents && imageIntents.length > 0) {
      const analyzeImages = imageIntents.filter(i => i.intent === 'analyze')
      const includeImages = imageIntents.filter(i => i.intent === 'include')
      
      if (analyzeImages.length > 0) {
        enhancedInput += `

üîç IMAGENS PARA ANALISAR (usar como refer√™ncia, N√ÉO incluir no HTML):
${analyzeImages.map((img, i) => `${i + 1}. ${img.url} - Use como inspira√ß√£o para conte√∫do`).join('\n')}`
      }
      
      if (includeImages.length > 0) {
        enhancedInput += `

üì∏ IMAGENS PARA INCLUIR NO HTML (usar estas URLs exatas):
${includeImages.map((img, i) => `${i + 1}. ${img.url} - Incluir no HTML`).join('\n')}`
      }
    } else if (imageUrls && imageUrls.length > 0) {
      enhancedInput += `

üì∏ IMAGENS FORNECIDAS (incluir no HTML):
${imageUrls.map((url, i) => `${i + 1}. ${url}`).join('\n')}`
    }

    // üî• RETORNAR CONTENT ESTRUTURADO
    if (!imageUrls || imageUrls.length === 0) {
      return enhancedInput
    }

    const content: any[] = [
      {
        type: 'text',
        text: enhancedInput
      }
    ]

    imageUrls.forEach((url) => {
      content.push({
        type: 'image_url',
        image_url: {
          url: url
        }
      })
    })

    return content
  }

  // üî• NOVA FUN√á√ÉO: Remover URLs de exemplo n√£o substitu√≠das
  private removeExampleUrls(html: string): string {
    // Padr√µes de URLs de exemplo comuns
    const examplePatterns = [
      /https?:\/\/exemplo\.com[^"'\s]*/gi,
      /https?:\/\/example\.com[^"'\s]*/gi,
      /https?:\/\/placeholder\.com[^"'\s]*/gi,
      /https?:\/\/demo\.com[^"'\s]*/gi,
      /https?:\/\/test\.com[^"'\s]*/gi
    ]
    
    let cleanedHtml = html
    
    // Remover todas as tags img com URLs de exemplo
    examplePatterns.forEach(pattern => {
      // Remover tags img inteiras que contenham URLs de exemplo
      cleanedHtml = cleanedHtml.replace(/<img[^>]*src=["']?[^"']*exemplo\.com[^"']*["']?[^>]*>/gi, '')
      cleanedHtml = cleanedHtml.replace(/<img[^>]*src=["']?[^"']*example\.com[^"']*["']?[^>]*>/gi, '')
      
      // Remover qualquer outra refer√™ncia a URLs de exemplo
      cleanedHtml = cleanedHtml.replace(pattern, '#')
    })
    
    return cleanedHtml
  }

  // üî• NOVA FUN√á√ÉO: Remover texto indesejado do HTML
  private removeUnwantedText(html: string): string {
    // Remover frases comuns que a IA pode adicionar
    const unwantedPhrases = [
      /HTML gerado com sucesso[^<]*/gi,
      /HTML modificado com sucesso[^<]*/gi,
      /Email processado com sucesso[^<]*/gi,
      /^[^<]*HTML[^<]*sucesso[^<]*!/gi
    ]
    
    let cleanedHtml = html
    
    unwantedPhrases.forEach(pattern => {
      cleanedHtml = cleanedHtml.replace(pattern, '')
    })
    
    // Garantir que o HTML comece com uma tag v√°lida
    cleanedHtml = cleanedHtml.trim()
    if (!cleanedHtml.startsWith('<')) {
      const firstTagIndex = cleanedHtml.indexOf('<')
      if (firstTagIndex > 0) {
        cleanedHtml = cleanedHtml.substring(firstTagIndex)
      }
    }
    
    return cleanedHtml
  }

  public async generateHTML(request: IARequest): Promise<IAResponse> {
    const startTime = Date.now()
    
    try {
      if (!this.apiKey) {
        throw new Error('OpenRouter API key not configured')
      }

      const existingHTML = request.context?.existingHTML
      const hasExistingHTML = !!(existingHTML && existingHTML.trim())

      logger.info(`Gerando HTML com IA - Input: ${request.userInput.substring(0, 50)}...`, {
        hasImages: !!(request.imageUrls && request.imageUrls.length > 0),
        imageCount: request.imageUrls?.length || 0,
        imageIntents: request.imageIntents?.map(i => i.intent),
        model: this.model,
        hasExistingHTML,
        existingHTMLLength: existingHTML?.length || 0
      })
      
      const userContent = this.buildMessageContent(
        request.userInput, 
        hasExistingHTML ? existingHTML : undefined,
        request.imageUrls,
        request.imageIntents,
        request.context?.chatHistory,
        request.context?.projectContext
      )

      const systemPrompt = this.getSystemPrompt(
        hasExistingHTML, 
        request.imageUrls, 
        request.imageIntents,
        request.context?.isModification || false,
        request.context?.projectContext,
        request.context?.chatHistory
      )
      
      const response = await this.client.post('/chat/completions', {
        model: this.model,
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userContent
          }
        ],
        max_tokens: 4096,
        temperature: 0.7
      })

      if (!response.data?.choices?.[0]?.message?.content) {
        throw new Error('Resposta inv√°lida da API OpenRouter')
      }

      let html = response.data.choices[0].message.content.trim()
      
      // üî• LIMPAR O HTML
      html = this.cleanHTML(html)
      html = this.removeEmojis(html)
      html = this.removeUnwantedText(html) // Nova fun√ß√£o para remover texto indesejado
      
      // üî• PROCESSAR IMAGENS
      const includeImages = request.imageIntents?.filter(i => i.intent === 'include') || []
      if (includeImages.length > 0) {
        includeImages.forEach((img, index) => {
          const placeholderPattern = new RegExp(`https://example\\.com/[^"]+\\.(?:jpg|png|gif|webp)`, 'gi')
          const matches = html.match(placeholderPattern)
          if (matches && matches[index]) {
            html = html.replace(matches[index], img.url)
          }
        })
      } else if (!request.imageIntents && request.imageUrls && request.imageUrls.length > 0) {
        request.imageUrls.forEach((url, index) => {
          const placeholderPattern = new RegExp(`https://example\\.com/[^"]+\\.(?:jpg|png|gif|webp)`, 'gi')
          const matches = html.match(placeholderPattern)
          if (matches && matches[index]) {
            html = html.replace(matches[index], url)
          }
        })
      }
      
      // üî• REMOVER URLs DE EXEMPLO N√ÉO SUBSTITU√çDAS
      html = this.removeExampleUrls(html)
      
      // üî• PROCESSAR COM CHEERIO
      html = this.processHTMLWithCheerio(html)
      
      // üî• APLICAR CSS INLINE
      try {
        logger.info('Aplicando CSS inline...')
        html = inlineStyles(html)
        logger.info('CSS inline aplicado com sucesso')
      } catch (inlineError) {
        logger.error('Erro ao aplicar CSS inline:', inlineError)
      }
      
      const processingTime = Date.now() - startTime
      
      logger.info(`HTML gerado com sucesso em ${processingTime}ms`, {
        imagesProcessed: request.imageUrls?.length || 0,
        imagesAnalyzed: request.imageIntents?.filter(i => i.intent === 'analyze').length || 0,
        imagesIncluded: request.imageIntents?.filter(i => i.intent === 'include').length || 0,
        model: this.model,
        htmlContainsImages: html.includes('<img'),
        wasModification: hasExistingHTML
      })
      
      return {
        html,
        subject: this.extractSubject(request.userInput, existingHTML),
        response: hasExistingHTML 
          ? 'Email modificado com sucesso!'
          : request.imageUrls && request.imageUrls.length > 0 
            ? `Email criado com sucesso! ${request.imageUrls.length} imagem(ns) processada(s).`
            : 'Email criado com sucesso!',
        metadata: {
          model: this.model,
          processingTime,
          generatedAt: new Date().toISOString(),
          originalPrompt: request.userInput,
          isGenerated: !hasExistingHTML,
          service: 'mailtrendz-ia-service',
          imagesAnalyzed: request.imageUrls?.length || 0
        }
      }
      
    } catch (error: any) {
      logger.error('Erro na gera√ß√£o de HTML com IA:', error.message)
      logger.error('Detalhes do erro:', {
        response: error.response?.data,
        status: error.response?.status,
        model: this.model
      })
      throw error
    }
  }

  private cleanHTML(html: string): string {
    html = html.replace(/\\n/g, '').replace(/\n/g, '').replace(/\r/g, '')
    html = html.replace(/\\"/g, '"')
    html = html.replace(/```html/gi, '').replace(/```/g, '')
    html = html.replace(/>\s+</g, '><').trim()
    
    return html
  }

  private removeEmojis(html: string): string {
    const emojiRegex = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu
    
    return html.replace(emojiRegex, '').trim()
  }

  private processHTMLWithCheerio(html: string): string {
    try {
      const $ = cheerio.load(html)
      
      let styleTag = $('style').html()
      if (styleTag) {
        let bodyRule = styleTag.match(/body\s*{[^}]*}/g)
        
        if (!bodyRule || !bodyRule[0].includes('font-size')) {
          styleTag = styleTag.replace(/body\s*{/, 'body { font-size: 18px;')
          $('style').html(styleTag)
        }
        
        let pRule = styleTag.match(/p\s*{[^}]*}/g)
        if (!pRule || !pRule[0].includes('font-size')) {
          styleTag += '\np { font-size: 18px; }'
          $('style').html(styleTag)
        }
        
        html = $.html()
      }
      
      return html
    } catch (error) {
      logger.error('Erro ao processar HTML com Cheerio:', error)
      return html
    }
  }

  private extractSubject(userInput: string, existingHTML?: string): string {
    if (existingHTML) {
      const titleMatch = existingHTML.match(/<title>([^<]+)<\/title>/i)
      if (titleMatch && titleMatch[1]) {
        return titleMatch[1]
      }
    }
    
    const input = userInput.toLowerCase()
    
    if (input.includes('promocional') || input.includes('produto') || input.includes('oferta')) {
      return 'Oferta Especial - N√£o Perca'
    } else if (input.includes('newsletter') || input.includes('novidades')) {
      return 'Newsletter - Principais Novidades'
    } else if (input.includes('boas-vindas') || input.includes('bem-vindo')) {
      return 'Bem-vindo! Que bom ter voc√™ conosco'
    } else if (input.includes('fitness') || input.includes('exerc√≠cio')) {
      return 'Transforme Seu Corpo - Comece Hoje'
    } else {
      return 'Email Personalizado'
    }
  }

  public async modifyHTML(
    instructions: string, 
    existingHTML: string = '', 
    imageUrls?: string[],
    imageIntents?: Array<{ url: string; intent: 'analyze' | 'include' }>
  ): Promise<IAResponse> {
    const modificationPrompt = existingHTML 
      ? `Modifique este HTML seguindo as instru√ß√µes: "${instructions}"\n\nHTML atual:\n${existingHTML}`
      : instructions

    return this.generateHTML({
      userInput: modificationPrompt,
      context: { 
        isModification: true,
        existingHTML: existingHTML 
      },
      imageUrls,
      imageIntents
    })
  }

  public async healthCheck(): Promise<boolean> {
    try {
      if (!this.apiKey) {
        return false
      }

      const response = await this.client.get('/models')
      return response.status === 200
    } catch (error) {
      logger.error('Health check IA falhou:', error)
      return false
    }
  }

  public isEnabled(): boolean {
    return !!this.apiKey
  }

  public getModel(): string {
    return this.model
  }

  public async processMultiple(requests: IARequest[]): Promise<IAResponse[]> {
    const maxConcurrent = Math.min(this.maxConcurrent, requests.length)
    const results: IAResponse[] = []
    
    for (let i = 0; i < requests.length; i += maxConcurrent) {
      const batch = requests.slice(i, i + maxConcurrent)
      const batchPromises = batch.map(request => this.generateHTML(request))
      
      try {
        const batchResults = await Promise.all(batchPromises)
        results.push(...batchResults)
      } catch (error) {
        logger.error('Erro no processamento em lote:', error)
        throw error
      }
    }
    
    return results
  }
}

export const iaService = new IAService()
export default iaService