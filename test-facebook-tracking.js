// Teste completo do sistema de Facebook Tracking - MailTrendz
// Execute: node test-facebook-tracking.js

const axios = require('axios');

const API_BASE = 'http://localhost:8001/api/v1';

async function testFacebookTracking() {
  console.log('üß™ Testando Sistema de Facebook Tracking...\n');

  // 1. Health Check
  console.log('1Ô∏è‚É£ Testando Health Check...');
  try {
    const response = await axios.get(`${API_BASE}/tracking/health`);
    console.log('‚úÖ Health Check:', response.data);
  } catch (error) {
    console.log('‚ùå Health Check falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 2. Teste de Evento Gen√©rico - ViewContent sem value (deve funcionar)
  console.log('2Ô∏è‚É£ Testando Evento Gen√©rico (ViewContent sem value)...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/event`, {
      eventName: 'ViewContent',
      eventData: {
        userEmail: 'test@mailtrendz.com',
        contentType: 'page',
        contentName: 'test_page',
        sourceUrl: 'http://localhost:5173/test'
        // Note: No value field - ViewContent doesn't require value
      }
    });
    console.log('‚úÖ Evento gen√©rico:', response.data);
  } catch (error) {
    console.log('‚ùå Evento gen√©rico falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 2b. Teste de ViewContent com value = 0 (deve funcionar)
  console.log('2Ô∏è‚É£b Testando ViewContent com value = 0...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/event`, {
      eventName: 'ViewContent',
      eventData: {
        userEmail: 'test@mailtrendz.com',
        contentType: 'page',
        contentName: 'test_page_with_value_zero',
        sourceUrl: 'http://localhost:5173/test',
        value: 0 // This should now work with the fix
      }
    });
    console.log('‚úÖ ViewContent com value=0:', response.data);
  } catch (error) {
    console.log('‚ùå ViewContent com value=0 falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 3. Teste de Registro
  console.log('3Ô∏è‚É£ Testando Track Registration...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/registration`, {
      eventId: 'test_registration_' + Date.now(),
      method: 'email'
    });
    console.log('‚úÖ Track Registration:', response.data);
  } catch (error) {
    console.log('‚ùå Track Registration falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 4. Teste de Compra
  console.log('4Ô∏è‚É£ Testando Track Purchase...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/purchase`, {
      eventId: 'test_purchase_' + Date.now(),
      orderId: 'order_test_' + Date.now(),
      value: 97.00,
      currency: 'BRL',
      productName: 'Pro Plan Monthly'
    });
    console.log('‚úÖ Track Purchase:', response.data);
  } catch (error) {
    console.log('‚ùå Track Purchase falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 5. Teste de Email Created
  console.log('5Ô∏è‚É£ Testando Track Email Created...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/email-created`, {
      eventId: 'test_email_' + Date.now(),
      projectId: 'project_test_' + Date.now(),
      templateType: 'newsletter',
      aiGenerated: true
    });
    console.log('‚úÖ Track Email Created:', response.data);
  } catch (error) {
    console.log('‚ùå Track Email Created falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 6. Teste de Lead
  console.log('6Ô∏è‚É£ Testando Track Lead...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/lead`, {
      eventId: 'test_lead_' + Date.now(),
      userEmail: 'lead@mailtrendz.com',
      leadType: 'contact_form'
    });
    console.log('‚úÖ Track Lead:', response.data);
  } catch (error) {
    console.log('‚ùå Track Lead falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 7. Teste de Trial Start
  console.log('7Ô∏è‚É£ Testando Track Trial Start...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/trial-start`, {
      eventId: 'test_trial_' + Date.now(),
      trialType: 'free_trial'
    });
    console.log('‚úÖ Track Trial Start:', response.data);
  } catch (error) {
    console.log('‚ùå Track Trial Start falhou:', error.response?.data || error.message);
  }

  console.log('\n');

  // 8. Teste de Subscription
  console.log('8Ô∏è‚É£ Testando Track Subscription...');
  try {
    const response = await axios.post(`${API_BASE}/tracking/subscription`, {
      eventId: 'test_subscription_' + Date.now(),
      subscriptionId: 'sub_test_' + Date.now(),
      planName: 'Pro Plan',
      value: 97.00,
      currency: 'BRL'
    });
    console.log('‚úÖ Track Subscription:', response.data);
  } catch (error) {
    console.log('‚ùå Track Subscription falhou:', error.response?.data || error.message);
  }

  console.log('\nüìä Teste conclu√≠do!');
  console.log('\nüîç Para verificar se os eventos chegaram ao Facebook:');
  console.log('1. Acesse: https://business.facebook.com/events_manager');
  console.log('2. Selecione seu Pixel: 24267804926180417');
  console.log('3. V√° em "Test Events"');
  console.log('4. Verifique se os eventos aparecem em tempo real');
}

// Executar teste
testFacebookTracking().catch(console.error);